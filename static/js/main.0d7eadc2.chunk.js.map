{"version":3,"sources":["comp/AnswerData.js","comp/Bookmarks.js","App.js","index.js"],"names":["AnswerData","BookmarkBorderIconStyle","data","imgLink","isPolish","setBookMarkedCities","hours","bookMarkedCities","city","time","Date","toLocaleDateString","minutes","getUTCMinutes","window","innerWidth","alignSelf","transition","BookmarkButton","useRef","filter","item","name","length","current","classList","add","remove","className","sys","country","title","clouds","all","src","alt","srcSet","getDay","getDate","ref","style","onClick","e","target","getAttribute","toggle","contains","prev","cityIndex","indexOf","index","Math","round","main","temp","temp_max","temp_min","Bookmarks","bookMarkCities","setCity","bookmarks","map","bookmark","App","useState","lang","setLang","cities","polishCities","FetchURL","iconID","setIconID","setData","setIsPolish","setHours","useEffect","floor","random","localStorage","getItem","JSON","parse","forEach","fetch","then","res","json","cod","newHours","getUTCHours","timezone","weather","icon","setItem","stringify","TextField","value","onChange","id","label","variant","CircularProgress","Switch","color","checked","previousIsPolish","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d7eadc2.chunk.js","sourcesContent":["\r\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\r\nimport { useRef } from \"react\";\r\n\r\nconst AnswerData = ({ data, imgLink, isPolish, setBookMarkedCities,  hours, bookMarkedCities, city }) => {\r\n  const weekDaysPolish = [\r\n    \"Niedziela\",\r\n    \"Poniedziałek\",\r\n    \"Wtorek\",\r\n    \"Środa\",\r\n    \"Czwartek\",\r\n    \"Piątek\",\r\n    \"Sobota\",\r\n  ];\r\n\r\n  const weekDays = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n  const time = new Date().toLocaleDateString();\r\n  const minutes = new Date().getUTCMinutes();\r\n\r\n\r\n  \r\n  const handleMark = (e) => {\r\n    if(!e.target.getAttribute('d')){  // DISABLE BORDER CLICK\r\n        e.target.classList.toggle(\"marked\");\r\n      if(e.target.classList.contains('marked')){\r\n        setBookMarkedCities(prev=> [...prev, data.name])\r\n\r\n      }else{\r\n        setBookMarkedCities(prev=> {\r\n        const cityIndex = prev.indexOf(data.name)\r\n          let newArray = prev.filter((item, index)=> index !== cityIndex)\r\n          return newArray\r\n        })\r\n      }\r\n    }\r\n   \r\n    \r\n  };\r\n  let BookmarkBorderIconStyle\r\n  if(window.innerWidth < 400){\r\n       BookmarkBorderIconStyle = {\r\n    alignSelf: \"center\",\r\n    transition : '0.3s'\r\n  }\r\n  }else{\r\n     BookmarkBorderIconStyle = {\r\n      alignSelf: \"flex-end\",\r\n      transition : '0.3s'\r\n  }}\r\n\r\n  \r\n  const BookmarkButton = useRef()\r\n\r\n  const isBookMarked = bookMarkedCities.filter(item=> item === data.name || item === city)\r\n\r\n  if(isBookMarked.length > 0 && BookmarkButton.current ){\r\n    BookmarkButton.current.classList.add(\"marked\")\r\n\r\n  }else{\r\n    if(BookmarkButton.current) BookmarkButton.current.classList.remove(\"marked\")\r\n    \r\n  }\r\n\r\n  return (\r\n    <div className=\"answerData\">\r\n      <div className=\"location\">\r\n        <h1 className=\"cityName\">\r\n          {data.name}, {data.sys.country}\r\n        </h1>\r\n\r\n        <div\r\n          title={`Clouds: ${data.clouds.all}%`}\r\n          className=\"temperatureAnswer2\"\r\n        >\r\n          <img className=\"weatherIcon\" src={imgLink} alt=\"\" srcSet=\"\" />\r\n        </div>\r\n\r\n        <div className=\"localeTime\">\r\n          <p>\r\n            {isPolish\r\n              ? `${weekDaysPolish[new Date().getDay()]}`\r\n              : `${weekDays[new Date().getDay()]}`}\r\n          </p>\r\n          <p>{new Date().getDate() < 10 ? `0${time}` : time}</p>\r\n          <div>\r\n            {hours < 10 ? (\r\n              <p>\r\n                {minutes < 10\r\n                  ? `0${hours}:0${minutes}`\r\n                  : `0${hours}:${minutes}`}\r\n              </p>\r\n            ) : (\r\n              <p>\r\n                {minutes < 10 ? `${hours}:0${minutes}` : `${hours}:${minutes}`}\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"temperature\">\r\n      \r\n        <BookmarkBorderIcon\r\n          ref={BookmarkButton}\r\n          className=\"bookMark\"\r\n          style={BookmarkBorderIconStyle}\r\n          onClick={handleMark}\r\n        />\r\n\r\n\r\n        <h2 title=\"Current\" className=\"primaryTemperature\">{`${Math.round(\r\n          data.main.temp\r\n        )}℃`}</h2>\r\n        <h4 title=\"MAX/MIN\" className=\"secondaryTemperature\">{`${Math.round(\r\n          data.main.temp_max\r\n        )}℃ / ${Math.round(data.main.temp_min)}℃`}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnswerData;\r\n","const Bookmarks = ({bookMarkCities, setCity}) => {\r\n\r\nconst bookmarks = bookMarkCities.map((bookmark, index)=>{\r\n    return(\r\n        <div style={{transition: 0.3}} onClick={()=>{setCity(bookmark)}} key={index} className=\"bookmarkSelf\">\r\n            {bookmark}\r\n        </div>\r\n    )\r\n})\r\n\r\n    return ( \r\n        <div className=\"bookmarksSection\">\r\n            {bookmarks}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Bookmarks;","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Switch from \"@material-ui/core/Switch\";\nimport AnswerData from \"./comp/AnswerData\";\nimport Bookmarks from \"./comp/Bookmarks\";\n\nfunction App() {\n  const API_KEY = \"40606d1a7691345518b8f45275e22d47\";\n  const [lang, setLang] = useState(\"eng\");\n  const cities = [\n    \"Warsaw\",\n    \"Paris\",\n    \"Madrid\",\n    \"Berlin\",\n    \"Barcelona\",\n    \"Rio\",\n    \"New York\",\n    \"Chicago\",\n    \"London\",\n    \"Rome\",\n    \"Tokyo\",\n  ];\n  const polishCities = [\n    \"Warszawa\",\n    \"Paryż\",\n    \"Madryt\",\n    \"Berlin\",\n    \"Barcelona\",\n    \"Rio\",\n    \"Nowy York\",\n    \"Chicago\",\n    \"Londyn\",\n    \"Rome\",\n    \"Tokio\",\n  ];\n  const [city, setCity] = useState();\n  const FetchURL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&lang=${lang}&appid=${API_KEY}`;\n  const [iconID, setIconID] = useState(\"01d\");\n  const imgLink = `https://openweathermap.org/img/wn/${iconID}@2x.png`;\n  const [data, setData] = useState([]);\n  const [isPolish, setIsPolish] = useState(false);\n  const [hours, setHours] = useState(\"\");\n  const [bookMarkedCities, setBookMarkedCities] = useState([]);\n\n  useEffect(() => { // PAGE LOADS\n    if (!isPolish) {\n      setCity(cities[Math.floor(Math.random() * cities.length)]);\n    } else {\n      setCity(polishCities[Math.floor(Math.random() * polishCities.length)]);\n    }\n\n    if(localStorage.getItem('bookMarkedCities')){ // DOWNLOADING BOOKMARKS FORM LOCALSTORAGE (PAGE LOADS)\n          JSON.parse(localStorage.getItem(\"bookMarkedCities\")).forEach(city=>{\n      setBookMarkedCities(prev => [...prev, city])\n    })\n    }\n\n\n\n  }, []);\n\n  useEffect(() => { // FETCHING DATA FROM API , SETTING LANGUAGE (BUGGED)\n    fetch(FetchURL)\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.cod === 200) {\n          setData(res);\n          let newHours = new Date().getUTCHours();\n          newHours += res.timezone / 3600;\n          if (newHours >= 24) {\n            newHours -= 24;\n            setHours(newHours);\n          } else {\n            setHours(new Date().getUTCHours() + res.timezone / 3600);\n          }\n          setIconID(res.weather[0].icon);\n        }\n      });\n\n    if (!localStorage.getItem(\"isPolish\")) {\n      localStorage.setItem(\"isPolish\", false);\n    }\n    if (localStorage.getItem(\"isPolish\") === \"false\") {\n      setIsPolish(false);\n    } else {\n      setIsPolish(true);\n    }\n    \n\n  }, [city, FetchURL]);\n\n\n  useEffect(()=>{ // ADDING BOOKMARKS TO LOCALSTORAGE\n    localStorage.setItem(\"bookMarkedCities\", JSON.stringify(bookMarkedCities))\n  \n  },[bookMarkedCities])\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"weatherApp\">\n        <div className=\"inputCity\">\n          <h2>{isPolish ? \"Podaj nazwe miasta\" : \"Enter city name\"}</h2>\n          <TextField\n            value={city}\n            onChange={(e) => setCity(e.target.value)}\n            id=\"outlined-basic\"\n            label={isPolish ? \"Miasto\" : \"City\"}\n            variant=\"outlined\"\n          />\n        </div>\n\n        {data.main ? (\n          <AnswerData\n            bookMarkedCities={bookMarkedCities}\n            setBookMarkedCities={setBookMarkedCities}\n            data={data}\n            imgLink={imgLink}\n            isPolish={isPolish}\n            hours={hours}\n            city={city}\n          />\n        ) : (\n          <CircularProgress />\n        )}\n      </div>\n      <Bookmarks setCity={setCity} bookMarkCities={bookMarkedCities} />\n\n      <div className=\"languageSwitch\">\n        ENG\n        <Switch\n          color=\"default\"\n          id=\"switch\"\n          checked={isPolish}\n          onChange={() => {\n            let previousIsPolish;\n            setIsPolish((prev) => !prev);\n            setLang((prev) => (prev === \"eng\" ? \"pl\" : \"eng\"));\n            if (localStorage.getItem(\"isPolish\") === \"false\") {\n              previousIsPolish = \"true\";\n            } else {\n              previousIsPolish = \"false\";\n            }\n            localStorage.setItem(\"isPolish\", previousIsPolish);\n          }}\n        />\n        PL\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}